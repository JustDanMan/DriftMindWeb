@page "/documents"
@using DriftMindWeb.Services
@inject IDriftMindApiService ApiService
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@rendermode InteractiveServer

<PageTitle>Dokumentenverwaltung</PageTitle>

<div class="documents-container">
    <div class="documents-header">
        <h2>
            <i class="bi bi-files"></i>
            Dokumentenverwaltung
        </h2>
        <p class="text-muted">Verwalten Sie alle Ihre hochgeladenen Dokumente</p>
    </div>

    <!-- Control Panel -->
    <div class="control-panel">
        <div class="row align-items-center">
            <div class="col-md-6">
                <button class="btn btn-primary" @onclick="LoadDocuments" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <text>Lädt...</text>
                    }
                    else
                    {
                        <i class="bi bi-arrow-clockwise me-2"></i>
                        <text>Aktualisieren</text>
                    }
                </button>
                
                <button class="btn btn-outline-primary ms-2" @onclick="ToggleFilter">
                    <i class="bi bi-funnel"></i>
                    Filter
                </button>
            </div>
            <div class="col-md-6 text-end">
                @if (documents?.Count > 0)
                {
                    <span class="text-muted">
                        @documents.Count von @totalDocuments Dokumenten
                    </span>
                }
            </div>
        </div>

        @if (showFilter)
        {
            <div class="filter-section mt-3">
                <div class="row">
                    <div class="col-md-4">
                        <label for="documentIdFilter" class="form-label">Dokument ID Filter</label>
                        <input @bind="documentIdFilter" type="text" class="form-control" id="documentIdFilter" 
                               placeholder="Nach Dokument ID suchen...">
                    </div>
                    <div class="col-md-4">
                        <label for="maxResults" class="form-label">Max. Ergebnisse</label>
                        <select @bind="maxResults" class="form-select" id="maxResults">
                            <option value="10">10</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </div>
                    <div class="col-md-4 d-flex align-items-end">
                        <button class="btn btn-secondary" @onclick="ApplyFilter" disabled="@isLoading">
                            <i class="bi bi-search"></i>
                            Anwenden
                        </button>
                        <button class="btn btn-outline-secondary ms-2" @onclick="ClearFilter">
                            <i class="bi bi-x-circle"></i>
                            Zurücksetzen
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Documents List -->
    <div class="documents-list">
        @if (isLoading && (documents == null || documents.Count == 0))
        {
            <div class="loading-container">
                <!-- Skeleton cards for better UX -->
                <div class="skeleton-container w-100">
                    <div class="skeleton-grid">
                        @for (int i = 0; i < skeletonCardCount; i++)
                        {
                            <div class="skeleton-document-card">
                                <!-- Document Header -->
                                <div class="skeleton-document-header">
                                    <div class="skeleton-document-info">
                                        <div class="skeleton-line skeleton-title"></div>
                                        <div class="skeleton-line skeleton-document-id"></div>
                                    </div>
                                    <div class="skeleton-document-actions">
                                        <div class="skeleton-button"></div>
                                        <div class="skeleton-button-small"></div>
                                    </div>
                                </div>

                                <!-- Document Stats -->
                                <div class="skeleton-document-stats">
                                    <div class="skeleton-stats-row">
                                        <div class="skeleton-stat-item">
                                            <div class="skeleton-stat-value"></div>
                                            <div class="skeleton-stat-label"></div>
                                        </div>
                                        <div class="skeleton-stat-item">
                                            <div class="skeleton-stat-value"></div>
                                            <div class="skeleton-stat-label"></div>
                                        </div>
                                        <div class="skeleton-stat-item">
                                            <div class="skeleton-stat-value"></div>
                                            <div class="skeleton-stat-label"></div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Document Preview -->
                                <div class="skeleton-document-preview">
                                    <div class="skeleton-line skeleton-preview-title"></div>
                                    <div class="skeleton-line"></div>
                                    <div class="skeleton-line short"></div>
                                </div>

                                <!-- Document Footer -->
                                <div class="skeleton-document-footer">
                                    <div class="skeleton-line skeleton-date"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (documents == null || documents.Count == 0)
        {
            <div class="empty-state">
                <div class="text-center py-5">
                    <i class="bi bi-file-earmark-x display-1 text-muted mb-3"></i>
                    <h4>Keine Dokumente gefunden</h4>
                    <p class="text-muted">Es wurden noch keine Dokumente hochgeladen oder sie entsprechen nicht den Filterkriterien.</p>
                    <a href="/chat" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-2"></i>
                        Erstes Dokument hochladen
                    </a>
                </div>
            </div>
        }
        else
        {
            <div class="documents-grid">
                @foreach (var document in documents)
                {
                    <div class="document-card">
                        <div class="document-header">
                            <div class="document-info">
                                <h5 class="document-title" title="@(string.IsNullOrEmpty(document.FileName) ? document.DocumentId : document.FileName)">
                                    @if (!string.IsNullOrEmpty(document.FileName))
                                    {
                                        <i class="bi @GetFileIcon(document.FileType)"></i>
                                        <span class="document-title-text">@document.FileName</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-file-text"></i>
                                        <span class="document-title-text">@document.DocumentId</span>
                                    }
                                </h5>
                                <p class="document-id text-muted">
                                    ID: @document.DocumentId
                                </p>
                            </div>
                            <div class="document-actions">
                                <DownloadButton DocumentId="@document.DocumentId" 
                                              FileName="@document.FileName"
                                              OnError="@(async (string error) => await HandleDownloadError(error))"
                                              OnSuccess="@(async () => await HandleDownloadSuccess(document.FileName))" />
                                
                                <button class="btn btn-sm btn-outline-danger ms-2" 
                                        @onclick="() => ConfirmDelete(document.DocumentId)"
                                        disabled="@(isDeleting.Contains(document.DocumentId))">
                                    @if (isDeleting.Contains(document.DocumentId))
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-trash"></i>
                                    }
                                </button>
                            </div>
                        </div>

                        <div class="document-stats">
                            <div class="row text-center">
                                <div class="col-4">
                                    <div class="stat-item">
                                        <div class="stat-value">@document.ChunkCount</div>
                                        <div class="stat-label">Chunks</div>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="stat-item">
                                        <div class="stat-value">@FormatFileSize(document.FileSizeBytes)</div>
                                        <div class="stat-label">Größe</div>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="stat-item">
                                        <div class="stat-value">
                                            <i class="bi @GetFileIcon(document.FileType)" style="font-size: 1.5rem;"></i>
                                        </div>
                                        <div class="stat-label">Typ</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (document.SampleContent?.Count > 0)
                        {
                            <div class="document-preview">
                                <h6>Vorschau:</h6>
                                <div class="preview-content">
                                    @foreach (var sample in document.SampleContent.Take(2))
                                    {
                                        <p class="preview-text">@sample.Substring(0, Math.Min(150, sample.Length))@(sample.Length > 150 ? "..." : "")</p>
                                    }
                                </div>
                            </div>
                        }

                        <div class="document-footer">
                            <div class="document-dates">
                                <small class="text-muted">
                                    <i class="bi bi-calendar-plus me-1"></i>
                                    Erstellt: @document.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                                </small>
                                @* 
                                    TODO: Hide LastUpdated display since documents cannot be updated in current system
                                    Uncomment when document update functionality is implemented
                                @if (document.LastUpdated != document.CreatedAt)
                                {
                                    <br>
                                    <small class="text-muted">
                                        <i class="bi bi-calendar-check me-1"></i>
                                        Aktualisiert: @document.LastUpdated.ToString("dd.MM.yyyy HH:mm")
                                    </small>
                                }
                                *@
                            </div>
                            @if (!string.IsNullOrEmpty(document.Metadata))
                            {
                                <div class="document-metadata mt-2">
                                    <small class="text-muted">
                                        <i class="bi bi-info-circle me-1"></i>
                                        @document.Metadata
                                    </small>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Pagination -->
    @if (totalDocuments > maxResults)
    {
        <div class="pagination-section">
            <nav aria-label="Document pagination">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage <= 1 || isLoading)">
                            Vorherige
                        </button>
                    </li>
                    
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePage(i)" disabled="@isLoading">
                                @i
                            </button>
                        </li>
                    }
                    
                    <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage >= totalPages || isLoading)">
                            Nächste
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (!string.IsNullOrEmpty(documentToDelete))
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle text-warning me-2"></i>
                        Dokument löschen
                    </h5>
                </div>
                <div class="modal-body">
                    <p>Sind Sie sicher, dass Sie das Dokument <strong>@documentToDelete</strong> löschen möchten?</p>
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Warnung:</strong> Diese Aktion kann nicht rückgängig gemacht werden. Alle zugehörigen Chunks werden ebenfalls gelöscht.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete" disabled="@isDeleting.Any()">
                        Abbrechen
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteDocument" disabled="@isDeleting.Any()">
                        @if (isDeleting.Contains(documentToDelete))
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-trash me-2"></i>
                        Löschen
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<DocumentInfo>? documents;
    private int totalDocuments = 0;
    private int currentPage = 1;
    private int maxResults = 50;
    private string? documentIdFilter;
    private bool showFilter = false;
    private bool isLoading = false;
    private HashSet<string> isDeleting = new();
    private string? documentToDelete;

    // Configuration values
    private int skeletonCardCount;
    private int initialPageSize;

    private int totalPages => Math.Max(1, (int)Math.Ceiling((double)totalDocuments / maxResults));

    protected override void OnInitialized()
    {
        // Load configuration values
        skeletonCardCount = Configuration.GetValue<int>("DocumentsPage:SkeletonCardCount", 3);
        initialPageSize = Configuration.GetValue<int>("DocumentsPage:InitialPageSize", 50);
        maxResults = initialPageSize;

        // Initialize with loading state - page appears immediately
        isLoading = true;
        documents = new List<DocumentInfo>(); // Empty list to show loading UI
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load data after first render for immediate UI feedback
            await LoadDocuments();
        }
    }

    private void ToggleFilter()
    {
        showFilter = !showFilter;
    }

    private async Task LoadDocuments()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var skip = (currentPage - 1) * maxResults;
            var response = await ApiService.GetDocumentsAsync(maxResults, skip, documentIdFilter);
            
            if (response != null && response.Success)
            {
                documents = response.Documents;
                totalDocuments = response.TotalDocuments;
            }
            else
            {
                documents = new List<DocumentInfo>();
                totalDocuments = 0;
            }
        }
        catch (Exception)
        {
            // Handle error
            documents = new List<DocumentInfo>();
            totalDocuments = 0;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilter()
    {
        currentPage = 1;
        await LoadDocuments();
    }

    private async Task ClearFilter()
    {
        documentIdFilter = null;
        showFilter = false;
        currentPage = 1;
        await LoadDocuments();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadDocuments();
        }
    }

    private void ConfirmDelete(string documentId)
    {
        documentToDelete = documentId;
    }

    private void CancelDelete()
    {
        documentToDelete = null;
    }

    private async Task DeleteDocument()
    {
        if (string.IsNullOrEmpty(documentToDelete))
            return;

        var documentIdToDelete = documentToDelete; // Store the ID before it gets reset
        isDeleting.Add(documentIdToDelete);
        StateHasChanged();

        try
        {
            var success = await ApiService.DeleteDocumentAsync(documentIdToDelete);
            
            if (success)
            {
                // Remove from local list
                if (documents != null)
                {
                    documents.RemoveAll(d => d.DocumentId == documentIdToDelete);
                    totalDocuments--;
                }
                documentToDelete = null;
                
                // Reload if necessary
                if (documents?.Count == 0 && currentPage > 1)
                {
                    currentPage--;
                    await LoadDocuments();
                }
            }
        }
        catch (Exception)
        {
            // Handle error
        }
        finally
        {
            isDeleting.Remove(documentIdToDelete); // Use the stored ID instead of the reset documentToDelete
            documentToDelete = null;
            StateHasChanged();
        }
    }

    private string GetFileIcon(string? fileType)
    {
        if (string.IsNullOrEmpty(fileType))
            return "bi-file-earmark";

        var type = fileType.ToLowerInvariant();

        // Check by file extension first
        if (type.StartsWith('.'))
        {
            return type switch
            {
                ".pdf" => "bi-file-earmark-pdf text-danger",
                ".docx" or ".doc" => "bi-file-earmark-word text-primary",
                ".xlsx" or ".xls" => "bi-file-earmark-excel text-success",
                ".pptx" or ".ppt" => "bi-file-earmark-ppt text-warning",
                ".txt" => "bi-file-earmark-text text-secondary",
                ".md" => "bi-file-earmark-code text-info",
                ".zip" or ".rar" or ".7z" => "bi-file-earmark-zip text-warning",
                ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" => "bi-file-earmark-image text-success",
                ".mp4" or ".avi" or ".mov" or ".wmv" => "bi-file-earmark-play text-danger",
                ".mp3" or ".wav" or ".flac" => "bi-file-earmark-music text-primary",
                _ => "bi-file-earmark text-muted"
            };
        }

        // Check by MIME type
        return type switch
        {
            "application/pdf" => "bi-file-earmark-pdf text-danger",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document" or 
            "application/msword" => "bi-file-earmark-word text-primary",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" or 
            "application/vnd.ms-excel" => "bi-file-earmark-excel text-success",
            "application/vnd.openxmlformats-officedocument.presentationml.presentation" or 
            "application/vnd.ms-powerpoint" => "bi-file-earmark-ppt text-warning",
            "text/plain" => "bi-file-earmark-text text-secondary",
            "text/markdown" => "bi-file-earmark-code text-info",
            "application/zip" or "application/x-rar-compressed" => "bi-file-earmark-zip text-warning",
            "image/jpeg" or "image/png" or "image/gif" or "image/bmp" => "bi-file-earmark-image text-success",
            "video/mp4" or "video/avi" => "bi-file-earmark-play text-danger",
            "audio/mpeg" or "audio/wav" => "bi-file-earmark-music text-primary",
            _ => "bi-file-earmark text-muted"
        };
    }

    private string FormatFileSize(long? bytes)
    {
        if (bytes == null || bytes == 0) return "0 B";
        
        string[] suffixes = { "B", "KB", "MB", "GB" };
        int suffixIndex = 0;
        double size = bytes.Value;

        while (size >= 1024 && suffixIndex < suffixes.Length - 1)
        {
            size /= 1024;
            suffixIndex++;
        }

        return $"{size:F1} {suffixes[suffixIndex]}";
    }

    private Task HandleDownloadError(string error)
    {
        // Hier könnten Sie eine Benachrichtigung anzeigen oder einen Toast verwenden
        // Für jetzt loggen wir einfach zur Konsole
        Console.WriteLine($"Download-Fehler: {error}");
        return Task.CompletedTask;
    }

    private Task HandleDownloadSuccess(string? fileName)
    {
        // Optional: Success-Feedback anzeigen
        Console.WriteLine($"Download gestartet: {fileName ?? "Dokument"}");
        return Task.CompletedTask;
    }
}
